		// Объект для запросов, пока что только GET
			var ajax = {

				// принимает:
				// url [str] - адрес для запроса
				// successCallback [fn] - колбек, который выполнится в случае успешного запроса
				// stateChangeCallback [fn] - колбек, который будет выполняться каждый раз при смене состояния запроса
				// errorCallback [fn] - колбек, который будет вызван при ошибке
				get: function(url, successCallback, stateChangeCallback, errorCallback){
					// создаем новый запрос
					// он будет хранить в себе всю необходимую информациию
					// и его целиком можно отдавать в колбеки, или же отдавать по частям
					var request = new XMLHttpRequest();
					request.open('GET', url, true);
					// обрабатываем колбеки
					request.onload = function() {
						// 200 (OK) - отправляется серером в ответ, если все хорошо
						if (request.status === 200) {
							// если все хорошо и мы передали колбек, то передаем в него ответ и сам запрос для отладки
							if (successCallback){
								successCallback(request.responseText, request);
							}
						} else {
							// если все плохо и мы передали колбек, то передаем в него запрос для отладки
							if (errorCallback){
								errorCallback(request);
							}
						}
					};
					request.onreadystatechange = function(){
						// Содержит состояние объекта XMLHttpRequest.
						// Изменяется от 0 до 4:
						// 0: запрос не инициализирован
						// 1: установлено соединение с сервером
						// 2: запрос получен
						// 3: обработка запроса
						// 4: запрос завершен и ответ готов
						if (stateChangeCallback){
							// в колбек передаем сам запрос и его состояние
							stateChangeCallback(request.readyState, request)
						}
					}
					// отправляем запрос
					request.send();
				}

			};

			// Объект для хранения нод
			var DOM = {
				result: document.getElementById('result'),
				tags: document.getElementById('tags')
			}

			// глобальная строка. Сюда будут записываться все заголовки,
			// собираться в одну большую строку. Для того, чтобы потом подсчитать сколько
			// раз повторяется слово в ней.
			var globalString = '';

			// функция подсвечивает в заголовке слова по регулярному выражению
			// принимает ноду (node) и часть регулярного выражения со словами,
			// которые надо подсветить
			function replaceRegExp(item, reg){
				// для начала берем саму строку заголовка
				text = item.innerHTML;
				// создаем регулярное выражение
				// создаем через new RegExp() для того, чтобы можно было передать переменную в выражение
				// само выражение будет иметь вид /(^| )(слово1|слово2|...|слово..n)( |$)/gim
				// (слово1|слово2|...|слово..n) - обозначает то, что нам нужно найти любое из этих слов
				// или несколько таких, как повезет
				// (^| ) - говорит, что перед словом может быть либо пробел, либо это слово первое в заголовке
				// ^ - это начало строки
				// потмоу что слова по сути разделяются пробелами, но пробела перед первым словом просто нет
				// ( |$) - то же самое, только для конца строки
				// $ - это конец строки
				// substr(1) - обрежет первый разделитель, чтобы не было ошибки
				exp = new RegExp('(^| )('+reg.substr(1)+')( |$)', 'gim');
				// и вызываем у строки с заголовком метод replace(), который
				// по заданному выражению найдет все слова
				// и каждое заменит на то, что мы скажем
				// в регулярных выражениях все что находится в круглых скобочках обозначается как 
				// "запоминающая группа", и то что будет найдено потом можно взяь как $1
				// но это если группа одна. Если их несколько, то $1 будет меняться в зависимости
				// от количества групп. Тоесть в нашем случае будет три группы (начало)(слова)(конец)
				// соответственно у нас будет $1, $2 и $3
				// и результат поиска слов будет в $2
				// нам не нужно оборачивать $2 во что-либо, метод сам заменит это на найденное слово
				// мы можем заменить слово на все что угодно, напрмиер обернем слово в тег <i>
				// и тогда мы сможем стилизировтаь это слово в заголовке, какждое такое слово
				// заменится на это слово, обернутое в тег <i>
				item.innerHTML = text.replace(exp, ' <i>$2</i> ');
			};

			// функция подсвечивает повторяемые слова
			function hightlightCommon(array) {
				// для начала создадим переменную для регулярного выражения
				// в итоге нам нужно получить часть выражения '(слово1|слово2|...|слово..n)'
				// и строка будет проверяться на наличие любого из слов, которое мы тут укажем
				var reg = '';
				// переменная для указания текущей позиции слова на пъедестале
				// первое место - 1, второе - 2, и так далее
				var top = 1,
						// и узнаем сколько раз повторилось самое повторяемое слово
						// мы помним, что у нас все слова лежат в массиве, и самое повторяемое у нас на первом месте
						// тоесть первое слово мы возьмем как array[0], а каждое слово у нас - это массив, и значение
						// лежит во втором элементе этого массива, тоесть в array[0][1]
						// эта переменная будет служить последним самым большим колиеством повторений
						max = array[0][1];
				// пробегаемся по топ-повторяемых
				array.forEach(function(item){
					// если значение меньше чем последнее самое большое количество повторений
					if (item[1] < max){
						// то теперь оно самое большое и предыдущее уже не будет сравниваться
						max = item[1];
						// а сам топ увеличиваем на 1
						// таким образом мы получим группы слов, если они совпадают по повторениям
						// например слово1 - 4, слово2 - 3, слово3 - 3
						// одинаковые повторения стоят на одной позиции по сути
						top++;
					}
					// добвляем в конец списка с тегами новый элемент
					// он будет показывть слово и сколько раз оно повторилось
					DOM.tags.innerHTML = DOM.tags.innerHTML + '<li data-top="'+top+'">'+item[0]+'<i>'+item[1]+'</i></li>'
					// а в строку с частью регулярного выражения добавляем слово через разделитель
					reg += '|'+item[0]
				});
				// выборка вернет NodeList а не массив, и перебрать их просто так не получится
				// поэтому вызовем метод forEach в контексте выбранных элементов
				[].forEach.call(document.getElementsByClassName('title'), function(title){
					// для каждого заголовка вызываем функцию подсветки
					replaceRegExp(title, reg);
				})
			};

			// функция принимает массив, и сортирует его
			// -->> http://stackoverflow.com/questions/1069666/sorting-javascript-object-by-property-value
			function sortCommon(sortable){
				// у массива есть метод sort(), который может принять на вход функцию,
				// в которой мы сами можем указать как сортировать элементы
				// в данном случае мы получим массив по возрастанию от меньшего к большему
				// и самые повторяемые оказываются в конце массива
				sortable.sort(function(a, b) {
					return a[1] - b[1]
				});
				// и нам нужно вернуть перевернутый массив, потому что
				// так у нас самые повторяемые окажутся в начале,
				// нам будет удобно вызвать метод slice() чтобы взять срез
				// массива по заданному количеству элементов
				return sortable.reverse();
			};

			// находим определенное количество слов,
			// потому что всего слов может быть 1 000 000 и нам не нужно все их подсвечивать
			function findCommon(obj, length){
				// для этого создаем пустой массив для хранения слов
				var sortable = [];
				// пробегаемся по свойствам объекта
				for (var key in obj){
					// для большей безопасности проверим, является ли свойство действительно словом
					// потому что слово undefned нам ничего не несет по смыслу, так как и _
					if (key !== '' && key !== 'undefined' && key !== '_'){
						// добавляем в массив слово
						// оно представляет из себя массив, первый элемент которого - название свойства
						// второй - значение
						// таким образом получим [слово, 3]
						sortable.push([key, obj[key]])
					}
				}
				// если мы явно укажем сколько слов нам надо взять как самые повторяемые
				// напрмиер Топ 10 или Топ 5 или Топ 3
				if (length){
					// то нам нужно вернуть срез массива, при помощи метода slice()
					// он принимает два значения, начальный индекс и количество элементов
					// таким образом если нам нужно Топ 5, мы передаем 0,5
					return sortCommon(sortable).slice(0, length);
				} else {
					// в любом из случаем, мы должны отсортировать значения, потому что
					// они хранятся в объекте хаотично, потому что когда мы проходили по строке
					// слова в ней не стояли отсортированно ровно по мере их повторения
					return sortCommon(sortable);
				}
			}

			// функция подсчитывает слова, принимает строку, возвращает объект,
			// свойства которого соответствуют словам в строке
			function calculateWords(str){
				// меняем строку
				var string = str.toLowerCase()
						// убираем лишние символы, потому что они будут мешять и будут
						// определяться как чать слова
						.replace(/(\:|\::|,|\d|_|\-|\.|\"|\'|\–|\"|\$)/gim, '')
						// заменяем пробелы на специально придуманный разделитель {*}, он должен быть
						// таким, чтобы такое сочетание не повторилось где-то в тексте
						.replace(/ /gim, '{*}')
						// нарезаем строку в массив
						.split(/\{\*\}/),
						// счетчик - это объект
						counter = {};
				// пробегаемся по массиву и считаем повторения
				// к свойству объекта можно обратится похожим образом как к массиву
				// item.date === item['date']
				// поэтому в объекте свойство будет называться так как и само слово
				for(var i = 0; i < string.length; i++){
					// counter[string[i]] - можно заменить образно на counter['слово']
					// (counter['слово'] || 0) - вернет количество повторений, если мы
					// уже проходились по такому слову и свойство в объект уже добавили
					// или же если еще нет такого свойства, то буде возвращено undefined
					// и все упадет. В таком случае вернем 0, чтобы можно было прибавить
					// к нему повторение
					counter[string[i]] = (counter[string[i]] || 0) + 1;
				}
				return counter;
			}

			// функция оборачивает новость, принимает объект
			function drawNew(item){
				// добавляем заголовок в общую строку
				globalString += ' '+item.title;
				// возвращаем сразу шаблон
				// `` - это шаблонные строки. Они новые в ES6 и позволяют описывать шаблоны
				// в виде многострочной строки. Чтобы вставить переменную в шаблон, ее нужно обернуть
				// в конструкцию ${ }. Все что укажем в скобках обрабатывается как любой другой скрипт
				// item.pubDate - возвращает дату и время разделенные проелом, чтобы достать время
				// (идет после пробела), нужно нарезать сроку в массив методом split() и передать
				// в него пробел как разделитель. В итоге вернется массив из двух элементов.
				return `
					<li>
						<div class="date">${item.pubDate.split(' ')[1]}</div>
						<h4 class="title">${item.title}</h4>
						<p class="text">${item.content}</p>
					</li>
				`;
			};

			// отправляем запрос
			ajax.get('https://api.rss2json.com/v1/api.json?rss_url=http://www.pravda.com.ua/rss/', function(responseText){
				// создаем переменную для HTML-кода
				var html = '';
				// парсим и пробегаемся по новостям, каждая новость позвращается как объект
				JSON.parse(responseText).items.forEach(function(item){
					// оборачиваем новость и результат добавляем в конец
					html += drawNew(item);
				});
				// вставляем в результаты
				DOM.result.innerHTML = html;
				// нарезаем слова
				var wordsArray = findCommon(calculateWords(globalString), 10);
				// подсвечиваем слова
				hightlightCommon(wordsArray);
			});
